from pyrogram.errors import FloodWait
from time import time
from pyrogram.errors import MessageEmpty
from time import sleep
from random import randint
from pyowm import OWM
import os
from datetime import datetime
from pyrogram import Client, filters
from pyrogram.types import Message
from filter import Filter

app = Client("my_account")
owm = OWM('17c13f27c44dbe3359f65d3b5499a704')

REPLACEMENT_MAP = {
    "—è": " Å",
    "—é": "oƒ±",
    "—ç": "—î",
    "—ä": "q",
    "—ã": "ƒ±q",
    "—å": "q",
    "—â": "m",
    "—à": "m",
    "—á": "“∫",
    "—Ü": "«π",
    "—Ö": "—Ö",
    "—Ñ": "»∏",
    "—É": " é",
    "—Ç": "‚ä•",
    "—Å": "…î",
    "—Ä": "d",
    "–ø": "u",
    "–æ": "–æ",
    "–Ω": "–Ω",
    "–º": "w",
    "–ª": "v",
    "–∫": " û",
    "–π": "–∏",
    "–∏": "–∏",
    "–∑": "—î",
    "–∂": "–∂",
    "—ë": "«ù",
    "–µ": "«ù",
    "–¥": "6",
    "–≥": "L",
    "–≤": " ö",
    "–±": "g",
    "–∞": "…ê",
    "a": "…ê",
    "b": "q",
    "c": "…î",
    "d": "p",
    "e": "«ù",
    "f": "…ü",
    "g": "∆É",
    "h": "…•",
    "i": "·¥â",
    "j": "…æ",
    "k": " û",
    "l": "l",
    "m": "…Ø",
    "n": "u",
    "o": "o",
    "p": "d",
    "q": "b",
    "r": "…π",
    "s": "s",
    "t": " á",
    "u": "n",
    "v": " å",
    "w": " ç",
    "x": "x",
    "y": " é",
    "z": "z",
    "A": "‚àÄ",
    "B": "B",
    "C": "∆Ü",
    "D": "D",
    "E": "∆é",
    "F": "‚Ñ≤",
    "G": "◊§",
    "H": "H",
    "I": "I",
    "J": "≈ø",
    "K": "K",
    "L": "À•",
    "M": "W",
    "N": "N",
    "O": "O",
    "P": "‘Ä",
    "Q": "Q",
    "R": "R",
    "S": "S",
    "T": "‚î¥",
    "U": "‚à©",
    "V": "Œõ",
    "W": "M",
    "X": "X",
    "Y": "‚ÖÑ",
    "Z": "Z",
    "0": "0",
    "1": "∆ñ",
    "2": "·ÑÖ",
    "3": "∆ê",
    "4": "„Ñ£",
    "5": "œõ",
    "6": "9",
    "7": "„Ñ•",
    "8": "8",
    "9": "6",
    ",": "'",
    ".": "Àô",
    "?": "¬ø",
    "!": "¬°",
    '"': ",,",
    "'": ",",
    "(": ")",
    ")": "(",
    "[": "]",
    "]": "[",
    "{": "}",
    "}": "{",
    "<": ">",
    ">": "<",
    "&": "‚Öã",
    "_": "‚Äæ",
}


def get_wr():
    mgr = owm.weather_manager()
    observation = mgr.weather_at_place('Moskva')
    w = observation.weather
    temperature = w.temperature('celsius')
    return temperature


@app.on_message(filters.command('help', prefixes='.') & filters.me)
def help(_, msg):
    msg.edit("**TUSB** - —ç—Ç–æ FOSS –ø—Ä–æ–µ–∫—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –µ–≥–æ —Ü–µ–ª—å —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º\n"
             "**.com** - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ \n"
             "**github** - https://github.com/XXmmRR/TUSB_tg_bot\n"
             "**telegram** - @obfserver\n"
             "**.donate** - —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞")


@app.on_message(filters.command('donate', prefixes='.') & filters.me)
def don(_, msg):
    msg.edit('**payeer** - P1010500299\n'
             '**Webmoney**(wmz) - Z792545865033\n'
             '**Webmoney**(wmr) - R182458813554')



@app.on_message(filters.command('com', prefixes='.') & filters.me)
def guide(_, msg):
    msg.edit("–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —é–∑–µ—Ä –±–æ—Ç–∞ 'TUSB'\n"
             ".hack - –í–∑–ª–æ–º –º–∞–º—ã –æ–±–∏–¥—á–∏–∫–∞   \n"
             ".l_hack - –í–∑–ª–æ–º —Å–µ—Ä–¥–µ—á–∫–∞      \n"
             ".flip - –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –±—É–∫–≤—ã\n"
             ".type - –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∏ —Ç–µ–∫—Å—Ç–∞  \n"
             ".block - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n"
             ".spam –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ {@} - —Å–ø–∞–º–∏—Ç\n"
             ".poto (1, 2) - –ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ –ø–æ–∑–∏—Ü–∏–∏ \n"
             ".tag - –¢–µ–≥–∞–µ—Ç –≤—Å–µ—Ö –≤ –≥—Ä—É–ø–ø–µ \n"
             ".info_group - –û –≥—Ä—É–ø–ø–µ\n"
             ".joindate - –î–∞—Ç–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ\n"
             ".d_del - –£–¥–∞–ª—è–µ—Ç —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ –≥—Ä—É–ø–ø—ã\n"
             ".vax –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - –î–µ–ª–∞–µ—Ç –í–ê–• \n"
             ".yare –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - –î–µ–ª–∞–µ—Ç YARE \n"
             ".ure –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - –î–µ–ª–∞–µ—Ç –£–†–ï \n"
             ".neg - –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä –Ω–µ–≥–∞—Ç–∏–≤–∞ \n"
             ".gray - –î–µ–ª–∞–µ—Ç —Ñ–æ—Ç–æ —Å–µ—Ä—ã–º \n"
             ".cont - –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç—É—Ä—ã –Ω–∞ —Ñ–æ—Ç–æ \n"
             ".auf - –°–µ—Ä–¥—Ü–µ –≤–æ—Ä–∞ \n"
             ".ping - –ó–∞–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞ \n"
             ".donate - –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞\n"
             ".dem - —Ä–∞–Ω–¥–æ–º–Ω—ã–π –¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä –Ω–∞ —Ñ–æ—Ç–æ \n"
             "BY XMMR")


@app.on_message(filters.command('l_hack', prefixes='.') & filters.me)
def hack(_, msg):
    i = 1
    while i < 101:
        msg.edit(f"–í–∑–ª–æ–º —Ç–≤–æ–µ–≥–æ —Å–µ—Ä–¥–µ—á–∫–∞ {i}%‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è")
        i = i + randint(1, 3)
    msg.edit("–¢–≤–æ—ë —Å–µ—Ä–¥–µ—á–∫–æ –≤–∑–ª–æ–º–∞–Ω–æ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è")


@app.on_message(filters.command("flip", prefixes=".") & filters.me)
def flip(_, msg):
    text = msg.text.split(".flip", maxsplit=1)[1]
    final_str = ""
    for char in text:
        if char in REPLACEMENT_MAP.keys():
            new_char = REPLACEMENT_MAP[char]
        else:
            new_char = char
        final_str += new_char
    if text != final_str:
        msg.edit(final_str)
    else:
        msg.edit(text)


@app.on_message(filters.command('hack', prefixes='.') & filters.me)
def hack(_, msg):
    i = 1
    try:
        while i < 101:
            msg.edit(f"–í–∑–ª–æ–º —Ç–≤–æ–µ–π –º–∞–º—ã —á–æ—Ä—Ç {i}%üòàüòàüòàüòàüòà")
            i = i + randint(1, 3)
        msg.edit("–¢–≤–æ—è –ú–∞–º–∞ –í–∑–ª–æ–º–∞–Ω–∞")
    except FloodWait:
        print('wait')

@app.on_message(filters.command('type', prefixes='.') & filters.me)
def typing(_, msg):
    original_mess = msg.text.split('.type', maxsplit=1)[1]
    text = original_mess
    tbp = ''
    typesim = '‚ñí'

    while tbp != original_mess:
        try:
            msg.edit(tbp + typesim)
        except MessageEmpty:
            msg.edit(tbp + typesim + "‚ñí")


        tbp = tbp + text[0]
        text = text[1:]

        try:
            msg.edit(tbp)
        except MessageEmpty:
            msg.edit(tbp + typesim + "‚ñí")


@app.on_message(filters.command('wt', prefixes='.') & filters.me)
def send_wr(_, msg):
    weather = get_wr()
    msg.edit("–ü–æ–≥–æ–¥–∞ –≤ –ú–æ—Å–∫–≤–µ –°–µ–π—á–∞—Å  " + str(weather['temp']))


@app.on_message(filters.command('spam', prefixes='.') & filters.me)
def spam(_, msg):
    original = msg['text'].split(' ')[1]
    user = "@" + msg['text'].split(' ')[2]
    a = 1
    while a != int(original):
        app.send_message(user, '.')
        a = a + 1


@app.on_message(filters.command('block', prefixes='.') & filters.me)
def block_user(_, msg):
    try:
        username = msg["reply_to_message"]["from_user"]["username"]
        app.block_user(username)
    except TypeError:
        msg.edit('reply_message for block user')


@app.on_message(filters.command('poto', prefixes='.') & filters.me)
def get_poto(_, msg):
    ms_id = msg["message_id"]
    try:
        id = msg['chat']['id']
        count = msg['text'].split(' ')[1]
        name_id = msg['reply_to_message']['from_user']['id']
        pt = app.get_profile_photos(name_id)
        photo_id = []
        photo_ref = []
        selector = int(count) - 1
        for fotos in pt:
            photo_id.append(fotos['file_id'])
            photo_ref.append(fotos['file_ref'])
        app.send_photo(id, photo=photo_id[selector], file_ref=photo_ref[selector])
        app.delete_messages(id, ms_id)
    except:
        app.send_message('reply message like photo 1')


@app.on_message(filters.command('info_group', prefixes='.') & filters.me)
def info(_, msg):
    full = []
    title = msg['chat']['title']
    id = msg['chat']['id']
    typy = msg['chat']['type']
    scam = msg['chat']['is_scam']
    chat = app.get_chat(id)
    members = chat["members_count"]
    All = "–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ " + str(members) + "\n" + "–ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã " + title + "\nid:" + str(id) + "\n–¢–∏–ø: " + typy + '\n–°–∫–∞–º: ' + str(scam) + '\n' + "Admins:"
    adm = app.get_chat_members(id, filter="administrators")
    for l_adm in adm:
        full.append(l_adm['user']['first_name'] )
    f_str = str(full)
    send_adm = All + '\n' + "" +f_str[1: -1].replace(',','').replace("'", "")
    msg.edit(send_adm)


@app.on_message(filters.command("joindate", prefixes='.') & filters.me)
def join_date(app, message: Message):
    members = []
    for m in app.iter_chat_members(message.chat.id):
        members.append(
            (
                m.user.first_name,
                m.joined_date or app.get_messages(message.chat.id, 1).date,
            )
        )

    members.sort(key=lambda member: member[1])

    with open("joined_date.txt", "w", encoding="utf8") as f:
        f.write("Join Date      First Name\n")
        for member in members:
            f.write(
                str(datetime.fromtimestamp(member[1]).strftime("%y-%m-%d %H:%M"))
                + f" {member[0]}\n"
            )
    app.send_document(message.chat.id, "joined_date.txt")
    os.remove("joined_date.txt")


@app.on_message(filters.command('tag', prefixes='.') & filters.me)
def tag(_, msg):
    id = msg['chat']['id']
    mentionn = []
    for member in app.iter_chat_members(id):
        try:
            mentionn.append(member.user.mention)
        except:
            continue
    while len(mentionn) != 0:
        f5 = (mentionn[0:5])
        app.send_message(id, str(f5)[1:-1].replace(',', '\n').replace("'", ''))
        del mentionn[0:5]


@app.on_message(filters.command('d_del', prefixes='.') & filters.me)
def delete(_, msg):
    id = msg['chat']['id']
    deleted = [x for x in app.iter_chat_members(id) if x.user.is_deleted]
    print(len(deleted), "deleted accounts found")
    for u in deleted:
        try:
            app.kick_chat_member(id, u.user.id, int(time() + 60))
        except FloodWait as e:
            sleep(e.x)


@app.on_message(filters.command('neg', prefixes='.') & filters.me)
def neg(_, msg):
    id = msg['chat']['id']
    try:
        photo = msg['reply_to_message']['photo']
        file_id = photo['file_id']
        file_ref = photo['file_ref']
        app.download_media(file_ref=file_ref, message=file_id , file_name='1.jpg',)
    except:
        msg.edit('Reply photo')
    try:
        c_obj = Filter()
        c_obj.filter_negative('downloads/1.jpg')
        app.send_photo(id, 'filtred.jpg')
        os.remove('filtred.jpg')
        os.remove('downloads/1.jpg')
    except:
        app.send_message(id, 'Some Error occured')


@app.on_message(filters.command('gray', prefixes='.') & filters.me)
def sepia(_, msg):
    id = msg['chat']['id']
    try:
        photo = msg['reply_to_message']['photo']
        file_id = photo['file_id']
        file_ref = photo['file_ref']
        app.download_media(file_ref=file_ref, message=file_id, file_name='2.jpg')
    except TypeError:
        msg.edit('Reply photo')
    try:
        c_obj = Filter()
        c_obj.filter_sepia('downloads/2.jpg')
        app.send_photo(id, 'filtred1.jpg')
        os.remove('filtred1.jpg')
        os.remove('downloads/2.jpg')
    except:
        app.send_message(id, "Some error occured")


@app.on_message(filters.command('blur', prefixes='.') & filters.me)
def blured(_, msg):
    id = msg['chat']['id']
    try:
        photo = msg['reply_to_message']['photo']
        file_id = photo['file_id']
        file_ref = photo['file_ref']
        app.download_media(file_ref=file_ref, message=file_id, file_name='3.jpg')
    except TypeError:
        msg.edit('Reply photo')
    try:
        c_obj = Filter()
        c_obj.filter_blur('downloads/3.jpg')
        app.send_photo(id, 'filtred2.jpg')
        os.remove('filtred2.jpg')
        os.remove('downloads/3.jpg')
    except:
        app.send_message(id, "Some error occured")


@app.on_message(filters.command('cont', prefixes='.')& filters.me)
def contur(_, msg):
    id = msg['chat']['id']
    try:
        photo = msg['reply_to_message']['photo']
        file_id = photo['file_id']
        file_ref = photo['file_ref']
        app.download_media(file_ref=file_ref, message=file_id, file_name='4.jpg')
    except TypeError:
        msg.edit('Reply photo')
    try:
        c_obj = Filter()
        c_obj.filter_contour('downloads/4.jpg')
        app.send_photo(id, 'filtred3.jpg')
        os.remove('filtred3.jpg')
        os.remove('downloads/4.jpg')
    except:
        app.send_message(id, "Some error occured")


@app.on_message(filters.command('vax', prefixes='.')& filters.me)
def VAX(_, msg):
    id = msg['chat']['id']
    count = msg['text'].split(' ')[1]
    vaax = "–í–ê–• " * int(count)
    try:
        msg.edit(vaax)
    except ValueError:
        app.send_message(id, vaax)


@app.on_message(filters.command('yare', prefixes='.')& filters.me)
def yar(_, msg):
    id = msg['chat']['id']
    count = msg['text'].split(' ')[1]
    yare = "YARE " * int(count)
    try:
        msg.edit(yare)
    except ValueError:
        app.send_message(id, yare)


@app.on_message(filters.command('ure', prefixes='.')& filters.me)
def Ure(_, msg):
    id = msg['chat']['id']
    count = msg['text'].split(' ')[1]
    UREE = "–£–†–ï " * int(count)
    try:
        msg.edit(UREE)
    except ValueError:
        app.send_message(id, UREE)


@app.on_message(filters.command('auf', prefixes='.')& filters.me)
def volk(_, msg):
    msg.edit('.‚ó¢üê∫‚ó£            ‚ó¢üê∫‚ó£\n'
             'üê∫üê∫üê∫‚ó£ ‚ó¢üê∫üê∫üê∫\n'
             '‚ó•üê∫üê∫üê∫üê∫üê∫üê∫‚ó§\n'
             '    ‚ó•üê∫üê∫üê∫üê∫‚ó§\n'
             '         ‚ó•‚òùÔ∏è‚òùÔ∏è‚ó§\n'
             '             ‚ó• ‚ó§')


@app.on_message(filters.command('yes', prefixes='.')& filters.me)
def Ure(_, msg):
    count = msg['text'].split(' ')[1]
    UREE = "YES " * int(count)
    msg.edit(UREE)


@app.on_message(filters.command('ping', prefixes='.')& filters.me)
def ping(_, msg):
    start_time = time()
    id = msg['chat']['id']
    app.send_message(id, ("–ó–∞–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞ %s seconds " % (time() - start_time)))


@app.on_message(filters.command('dota', prefixes='.') & filters.me)
def send_gos(_, msg):
    try:
        app.send_message('@DotaGosuBot', '/start')
        text = app.get_history('@DotaGosuBot', limit=1)
        done = text[0]['text']
        msg.edit(done)
    except:
        app.send_message('–±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')


@app.on_message(filters.command('dem', prefixes='.') & filters.me)
def demotivation(_, msg):
    msg.edit('**–î–µ–º–æ—Ç–∏–≤–∏—Ä—É–µ–º...**')
    ms_id = msg["message_id"]
    try:
        id = msg['chat']['id']
        mess_id = msg['reply_to_message']['message_id']
        app.forward_messages(from_chat_id=id, chat_id="@super_rjaka_demotivator_bot", message_ids=mess_id,
                        as_copy=True, remove_caption=True)
        sleep(2)
        demovat = app.get_history('@super_rjaka_demotivator_bot', limit=1)
        fimaly = demovat[0]["message_id"]
        while demovat == mess_id:
            sleep(1)
        app.forward_messages(from_chat_id='@super_rjaka_demotivator_bot', chat_id=id, message_ids=fimaly,
                         as_copy=True, remove_caption=True)
        app.delete_messages(id, ms_id)
    except TypeError:
        msg.edit("reply media for demotivation")


@app.on_message(filters.command('calc', prefixes='.') & filters.me)
def calculate(_, msg):
    id = msg['chat']['id']
    ms_id = msg['message_id']
    original_txt = msg['text']
    try:
        first = original_txt.split(' ')[1]
        operator = original_txt.split(' ')[2]
        second = original_txt.split(' ')[3]
        print(first, operator, second)
        try:
            c = 0
            if operator == '+':
                c = int(first) + int(second)
                app.send_message(id, f'–û—Ç–≤–µ—Ç —Ä–∞–≤–µ–Ω {c}')
            if operator == '-':
                c = int(first) + int(second)
                app.send_message(id, f'–û—Ç–≤–µ—Ç —Ä–∞–≤–µ–Ω {c}')
            if operator == '*':
                c = int(first) * int(second)
                app.send_message(id, f'–û—Ç–≤–µ—Ç —Ä–∞–≤–µ–Ω {c}')
            if operator == '/':
                c = int(first) / int(second)
                app.send_message(id, f'–û—Ç–≤–µ—Ç —Ä–∞–≤–µ–Ω {c}')
            if operator == '**':
                c = int(first) ** int(second)
                app.send_message(id, f'–û—Ç–≤–µ—Ç —Ä–∞–≤–µ–Ω {c}')
            app.delete_messages(id, ms_id)
        except:
            app.send_message(id, "Invalid syntax")
    except TypeError:
        app.send_message(id, 'Error')


if __name__ == '__main__':
    app.run()